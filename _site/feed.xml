<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Dong</title>
		<link></link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>ubuntu-install-wechat</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;准备工作&lt;/h4&gt;
&lt;p&gt;-在下载和运行这个项目之前，你需要在电脑上安装 Git 和 Node.js (来自 &lt;em&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;&lt;/em&gt;)。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;在命令行中输入:&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;下载仓库
git clone https://github.com/geeeeeeeeek/electronic-wechat.git
进入仓库
cd electronic-wechat
安装依赖, 运行应用
npm install &amp;amp;&amp;amp; npm start&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section-2&quot;&gt;根据你的平台打包应用:&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;npm run build:osx
npm run build:linux
npm run build:win&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;npm-install--cnpmhttpsnpmtaobaoorg--npm-&quot;&gt;提示: 如果 npm install 下载缓慢，你可以使用 淘宝镜像(&lt;a href=&quot;https://npm.taobao.org/&quot;&gt;cnpm&lt;/a&gt;) 替代 npm 。&lt;/h4&gt;

&lt;h4 id=&quot;httpsgithubcomgeeeeeeeeekelectronic-wechatwikisystem-support-matrixe7a4bee58cbae8b4a1e78caee79a84e5ae89e8a385e58c85-&quot;&gt;新渠道: 使用你熟悉的包管理工具安装。请查看&lt;em&gt;&lt;a href=&quot;https://github.com/geeeeeeeeek/electronic-wechat/wiki/System-Support-Matrix#%E7%A4%BE%E5%8C%BA%E8%B4%A1%E7%8C%AE%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85&quot;&gt;社区贡献的镜像&lt;/a&gt;&lt;/em&gt; 。&lt;/h4&gt;

&lt;h4 id=&quot;homebrew---electronic-wechat-v120&quot;&gt;新渠道: homebrew 安装也已支持 (更新至 electronic-wechat v1.2.0)！&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;brew cask install electronic-wechat&lt;/p&gt;
&lt;/blockquote&gt;

</description>
				<pubDate>Tue, 28 Feb 2017 00:00:00 +0800</pubDate>
				<link>/2017/02/28/ubuntu-install-Wechat/</link>
				<guid isPermaLink="true">/2017/02/28/ubuntu-install-Wechat/</guid>
			</item>
		
			<item>
				<title>github-blog</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;准备工作&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;申请一个github帐号&lt;/li&gt;
  &lt;li&gt;安装git&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;jekyll&quot;&gt;为什么要用jekyll来重新部署博客？我简单的总结了一下：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;流行又简洁的MarkDown写作语法&lt;/li&gt;
  &lt;li&gt;轻量级的网站结构，不再有动态网站的沉重&lt;/li&gt;
  &lt;li&gt;方便的和github pages结合，不仅免费，而且方便&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;githubrepository&quot;&gt;1.在github新建一个仓库(repository)注意命名规则&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/resources/font-awesome/img/github-blog/creat_repository.png&quot; alt=&quot;示例&quot; /&gt;
&lt;img src=&quot;/resources/font-awesome/img/github-blog/fill_detail.png&quot; alt=&quot;示例&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;master&quot;&gt;2. 进入项目设置页面, 因为这个项目就是专门的放页面的,所以master分支即可.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/resources/font-awesome/img/github-blog/toSetting.png&quot; alt=&quot;示例&quot; /&gt;
&lt;img src=&quot;/resources/font-awesome/img/github-blog/setting_detail.png&quot; alt=&quot;示例&quot; /&gt;
&lt;img src=&quot;/resources/font-awesome/img/github-blog/setting1.png&quot; alt=&quot;示例&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jekyll-rubyjekyll&quot;&gt;3.之后我们就要在本地部署jekyll， 首先你需要安装ruby来使用本地jekyll。&lt;/h3&gt;
&lt;p&gt;可以直接使用两个命令完成Ruby的安装。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get update&lt;br /&gt;
sudo apt-get install ruby&lt;br /&gt;
sudo apt-get install rubygems&lt;br /&gt;
export PATH=$PATH:$HOME/bin:/var/lib/gems/1.8/bin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;安装jekyll。建议换成淘宝服务器：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo gem sources –remove http://rubygems.org/&lt;br /&gt;
sudo gem sources -a https://ruby.taobao.org/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查看当前设置的服务器&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo gem sources -l&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;安装Jekyll&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get install jekyll&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;jekyll目录
&lt;img src=&quot;/resources/font-awesome/img/github-blog/jekyll_mb.png&quot; alt=&quot;示例&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;4.在本地新建项目文件夹&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;jekyll new 名字&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下载一个jekyll模板,然后把模板文件解压到项目文件夹下,&lt;strong&gt;注意配置_config.yml&lt;/strong&gt;,_posts就是写博客的文件,后缀.md或者.markdown,命名规则(yyyy-mm-dd-名字.md),layout必须为post,查看效果请在项目文件夹下运行命令行&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jekyll serve&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在浏览器输入地址:localhost:4000,就可以看到效果&lt;/p&gt;

&lt;p&gt;在这里推荐一个快速入门学习markdown语法的&lt;em&gt;&lt;a href=&quot;http://www.ituring.com.cn/article/23&quot;&gt;网址&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;github&quot;&gt;5.上传到github仓库&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;git add .&lt;br /&gt;
git commit -m “注释”&lt;br /&gt;
git push origin master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后在浏览器上输入网址,你在setting置好的名字,就可以看到自己的博客
&lt;img src=&quot;/resources/font-awesome/img/github-blog/address.png&quot; alt=&quot;示例&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到此为止,下面就可以开始写博客了&lt;/p&gt;

</description>
				<pubDate>Fri, 04 Nov 2016 00:00:00 +0800</pubDate>
				<link>/2016/11/04/build-github-blog/</link>
				<guid isPermaLink="true">/2016/11/04/build-github-blog/</guid>
			</item>
		
			<item>
				<title>phpstorm</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;默认你是ubuntu系统&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;步骤开始&lt;/h2&gt;
&lt;p&gt;首先更新源&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get update&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这里写一下phpstorm 10的安装&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.首先在&lt;/strong&gt;&lt;a href=&quot;https://www.jetbrains.com/phpstorm/download/#section=linux-version&quot;&gt;Jetbrains官网&lt;/a&gt;&lt;strong&gt;下载PhpStorm的tar包．如果你偏爱命令行，那么可以使用wget来下载tar包&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/font-awesome/img/Lnmp/phpstorm.png&quot; alt=&quot;示例&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.安装jdk(phpstorm必须要jdk环境才能运行)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.下载jdk   
  
    http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html
  
2.解压压缩包
  
    sduo tar zxvf  文件名
  
    修改目录名称
  
    sudo mv   源目录名/   新目录名/   
  
3.配置环境变量
  
    创建文件/etc/profile.d/development.sh，将下面的内容复制到该文件。
   
    export JAVA_HOME=/usr/local/development/jdk1.7.0_04  
    export JRE_HOME=$JAVA_HOME/jre  
    export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH  
    export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH  
   
4.重启电脑  使用命令测试 
    java  -version 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.安装:打开一个终端窗口．将工作目录切换到下载目录，然后解压下载好的tar.gz文件．&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tar xvf PhpStorm-2016.1.tar.gz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在当前的工作目录下会生成一个新的目录，PhpStorm-145.258.2．为了保持系统整洁有序，我们把这个目录移到/opt/目录下．&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo mv PhpStorm-145.258.2/ /opt/phpstorm/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在，创建一个软链接．&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo ln -s /opt/phpstorm/bin/phpstorm.sh /usr/local/bin/phpstorm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后，在终端里输入phpstorm命令来启动PhpStorm程序．&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo ./PhpStorm-2016.2.1/bin/PhpStorm.sh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;到此为止&lt;/p&gt;
</description>
				<pubDate>Thu, 03 Nov 2016 00:00:00 +0800</pubDate>
				<link>/2016/11/03/phpstorm/</link>
				<guid isPermaLink="true">/2016/11/03/phpstorm/</guid>
			</item>
		
			<item>
				<title>LNMP</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;默认你已安装了ubuntu 16.04系统&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LNMP (PHP7.0+Mysql5.7+Nginx1.10)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;步骤开始&lt;/h2&gt;
&lt;p&gt;首先更新源&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get update&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mysql&quot;&gt;&lt;strong&gt;1.安装mysql&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get install mysql-server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;nginx&quot;&gt;&lt;strong&gt;2.安装nginx&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get install nginx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;安装好nginx，打开浏览器输入 &lt;a href=&quot;http://localhost&quot;&gt;localhost&lt;/a&gt;    看到 Welcome to nginx！ 说明安装成功了。&lt;/p&gt;

&lt;p&gt;修改nginx配置站点&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo vim /etc/nginx/sites-available/default&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果没有安装vim,请先安装(已安装请忽略)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get install vim&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下图为参考
&lt;img src=&quot;/resources/font-awesome/img/Lnmp/nginx.png&quot; alt=&quot;示例&quot; /&gt;
listen 设置网站访问端口号&lt;/p&gt;

&lt;p&gt;root 后面的路径表示监听的站点-&amp;gt;就是网站路径&lt;/p&gt;

&lt;p&gt;server_name 设置访问网站域名或者ip&lt;/p&gt;

&lt;p&gt;把fastcgi_pass和include snippets/fastcgi-php.conf;前面的#去掉&lt;/p&gt;

&lt;p&gt;如果想配置多站点,就复制server{  }多一份粘贴就好&lt;/p&gt;

&lt;p&gt;配置完重新启动nginx:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo service nginx reload&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;php70-fpm&quot;&gt;&lt;strong&gt;3.安装php7.0-fpm&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get install php7.0-fpm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;安装php 7.0  安装其他版本也是一样的。&lt;/p&gt;

&lt;p&gt;在刚配置完的站点目录下，新建个index.php测试下看看&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;phpinfo();&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/resources/font-awesome/img/Lnmp/phpinfo.png&quot; alt=&quot;示例&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到此图说明已近配置成功了，下面还需要安装一些常用的扩展库&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt install php-mysql php-curl php-mcrypt php-gd php-memcached php-redis&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此方式安装会同时在多个版本下面分别安装还有一些库&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt install php7.0  按tab 可以显示如下一些库&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php7.0            php7.0-fpm        php7.0-mysql      php7.0-sqlite3
php7.0-bcmath     php7.0-gd         php7.0-odbc       php7.0-sybase
php7.0-bz2        php7.0-gmp        php7.0-opcache    php7.0-tidy
php7.0-cgi        php7.0-imap       php7.0-pgsql      php7.0-xml
php7.0-cli        php7.0-interbase  php7.0-phpdbg     php7.0-xmlrpc
php7.0-common     php7.0-intl       php7.0-pspell     php7.0-xsl
php7.0-curl       php7.0-json       php7.0-readline   php7.0-zip
php7.0-dba        php7.0-ldap       php7.0-recode    
php7.0-dev        php7.0-mbstring   php7.0-snmp      
php7.0-enchant    php7.0-mcrypt     php7.0-soap
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果扩展安装完就可以进行开发了&lt;/p&gt;

&lt;p&gt;到此为止&lt;/p&gt;
</description>
				<pubDate>Thu, 03 Nov 2016 00:00:00 +0800</pubDate>
				<link>/2016/11/03/build_LNMP/</link>
				<guid isPermaLink="true">/2016/11/03/build_LNMP/</guid>
			</item>
		
			<item>
				<title>nginx与apache优缺点</title>
        <description>&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;nginx相对于apache的优点： 
 轻量级，同样起web 服务，比apache 占用更少的内存及资源 
 抗并发，nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能 
 高度模块化的设计，编写模块相对简单 
 社区活跃，各种高性能模块出品迅速啊 
 apache 相对于nginx 的优点： 
 rewrite ，比nginx 的rewrite 强大 
 模块超多，基本想到的都可以找到 
 少bug ，nginx 的bug 相对较多 
 超稳定 
 存在就是理由，一般来说，需要性能的web 服务，用nginx 。如果不需要性能只求稳定，那就apache 吧。后者的各种功能模块实现得比前者，例如ssl 的模块就比前者好，可配置项多。这里要注意一点，epoll(freebsd 上是 kqueue )网络IO 模型是nginx 处理性能高的根本理由，但并不是所有的情况下都是epoll 大获全胜的，如果本身提供静态服务的就只有寥寥几个文件，apache 的select 模型或许比epoll 更高性能。当然，这只是根据网络IO 模型的原理作的一个假设，真正的应用还是需要实测了再说的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;作为 Web 服务器：相比 Apache，Nginx 使用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。在高连接并发的情况下，Nginx是Apache服务器不错的替代品: Nginx在美国是做虚拟主机生意的老板们经常选择的软件平台之一. 能够支持高达 50,000 个并发连接数的响应, 感谢Nginx为我们选择了 epoll and kqueue 作为开发模型. 
 Nginx作为负载均衡服务器: Nginx 既可以在内部直接支持 Rails 和 PHP 程序对外进行服务, 也可以支持作为 HTTP代理 服务器对外进行服务. Nginx采用C进行编写, 不论是系统资源开销还是CPU使用效率都比 Perlbal 要好很多. 
 作为邮件代理服务器: Nginx 同时也是一个非常优秀的邮件代理服务器（最早开发这个产品的目的之一也是作为邮件代理服务器）, Last.fm 描述了成功并且美妙的使用经验. 
 Nginx 是一个安装非常的简单 , 配置文件非常简洁（还能够支持perl语法）, Bugs 非常少的服务器: Nginx 启动特别容易, 并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动. 你还能够不间断服务的情况下进行软件版本的升级 .&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx 配置简洁, Apache 复杂 
 Nginx 静态处理性能比 Apache 高 3倍以上 
 Apache 对 PHP 支持比较简单，Nginx 需要配合其他后端用 
 Apache 的组件比 Nginx 多 
 现在 Nginx 才是 Web 服务器的首选&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最核心的区别在于apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nginx处理静态文件好,耗费内存少.但无疑apache仍然是目前的主流,有很多丰富的特性.所以还需要搭配着来.当然如果能确定nginx就适合需求,那么使用nginx会是更经济的方式.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;从个人过往的使用情况来看，nginx的负载能力比apache高很多。最新的服务器也改用nginx了。而且nginx改完配置能-t测试一下配置有没有问题，apache重启的时候发现配置出错了，会很崩溃，改的时候都会非常小心翼翼现在看有好多集群站，前端nginx抗并发，后端apache集群，配合的也不错。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nginx处理动态请求是鸡肋，一般动态请求要apache去做，nginx只适合静态和反向。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;從我個人的經驗來看，nginx是很不錯的前端服務器，負載性能很好，在老奔上開nginx，用webbench模擬10000個靜態文件請求毫不吃力。apache對php等語言的支持很好，此外apache有強大的支持網路，發展時間相對nginx更久，bug少但是apache有先天不支持多核心處理負載雞肋的缺點，建議使用nginx做前端，後端用apache。大型網站建議用nginx自代的集群功能&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx优于apache的主要两点：1.Nginx本身就是一个反向代理服务器 2.Nginx支持7层负载均衡；其他的当然，Nginx可能会比apache支持更高的并发，但是根据NetCraft的统计，2011年4月的统计数据，Apache依然占有62.71%，而Nginx是7.35%，因此总得来说，Aapche依然是大部分公司的首先，因为其成熟的技术和开发社区已经也是非常不错的性能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;你对web server的需求决定你的选择。大部分情况下nginx都优于APACHE，比如说静态文件处理、PHP-CGI的支持、反向代理功能、前端Cache、维持连接等等。在Apache+PHP（prefork）模式下，如果PHP处理慢或者前端压力很大的情况下，很容易出现Apache进程数飙升，从而拒绝服务的现象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以看一下nginx lua模块：https://github.com/chaoslaw…apache比nginx多的模块，可直接用lua实现apache是最流行的，why？大多数人懒得更新到nginx或者学新事物&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于nginx，我喜欢它配置文件写的很简洁，正则配置让很多事情变得简单运行效率高，占用资源少，代理功能强大，很适合做前端响应服务器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apache在处理动态有优势，Nginx并发性比较好，CPU内存占用低，如果rewrite频繁，那还是Apache吧&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sun, 28 Feb 2016 00:00:00 +0800</pubDate>
				<link>/2016/02/28/nginx-and-apache-difference/</link>
				<guid isPermaLink="true">/2016/02/28/nginx-and-apache-difference/</guid>
			</item>
		
	</channel>
</rss>
